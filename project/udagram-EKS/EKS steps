kubectl apply -f aws-secret.yml
kubectl apply -f env-secret.yml
kubectl apply -f env-configmap.yml
# Deployments - Double check the Dockerhub image name and version in the deployment files
kubectl apply -f udagram-api-feed-deployment.yml
kubectl apply -f udagram-api-user-deployment.yml
kubectl apply -f udagram-frontend-deployment.yml
kubectl apply -f udagram-reverseproxy-deployment.yml
# Service
kubectl apply -f udagram-api-feed-service.yml
kubectl apply -f udagram-api-user-service.yml
kubectl apply -f udagram-frontend-service.yml
kubectl apply -f udagram-reverseproxy-service.yml
# Check the deployment names and their pod status
kubectl get deployments
# Create a Service object that exposes the frontend deployment
# The command below will ceates an external load balancer and assigns a fixed, external IP to the Service.
kubectl expose deployment frontend --type=LoadBalancer --name=publicfrontend
# Repeat the process for the *reverseproxy* deployment. 
# Check name, ClusterIP, and External IP of all deployments
kubectl get services 
kubectl get pods # It should show the STATUS as Running
